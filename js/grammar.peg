start
  = exp


p1binop "p1binop" 
  = OPAREN e:exp CPAREN {return {type:'op', op:'paren', exp:e}}
  / v:value {return v}

p2binop "p2binop" 
  = base:p1binop code:EXP exp:p2binop {return {type:'op', op:'exp', code:code, exp:exp, base:base}}
  / v:p1binop {return v}

p3binop "p3binop" 
  = v:p2binop code:MULT n:p3binop SEP*
  	{return {type:'op', op:"mult", code:code, left:v, right:n}}

  / code:DIV OCBRACE v:p2binop CCBRACE SEP* OCBRACE n:p3binop CCBRACE
  	{return {type:'op', op:"div", code:code, top:v, bottom:n}}

  / v:p2binop SEP* 
  	{return v}

p4binop "p4binop" //add, sub
  = v:p3binop code:PLUS n:p4binop 
  	{return {type:'op', op:'plus', code:code, left:v, right:n}}

  / v:p3binop SEP* {return v;}

binop "binop"
  = n:p4binop {return n;}

exp "exp"
  = t:binop { 
   return t;
  }

number "number"
  = v:DECIMAL { 
   return { type:'number', value:v };
  }

value "value"
  = n:number SEP* {return n;}


DECIMAL "DECIMAL"
  = mant:[0-9]+"."dec:[0-9]+ {
	  	var v= mant.join("")+"."+dec.join("");
	  	console.log(v);
	  	return parseFloat(v,10)
  	}
  / digits:[0-9]+ {return parseInt(digits.join(""),10)}

SEP "SEP"
  = [ \t\r\n]

MULT "MULT"
= "\cdot"SEP* {return "*"} 
/ "\times"SEP* {return "x"}

DIV "DIV"
= "\frac"SEP* {return ""}

PLUS "PLUS"
= "\plus"SEP* {return "+"}

EXP "EXP"
= "^"SEP* {return "^"}


OCBRACE "OCBRACE" 
	= "{"SEP*  {}

CCBRACE "CCBRACE" 
	= "}"SEP* {}

OPAREN "OPAREN" 
	= "("SEP* {}
CPAREN "CPAREN" 
	= ")"SEP* {}
