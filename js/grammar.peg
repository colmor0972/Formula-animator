{
  var CURR_ID = 0;
  var SYMBOL_TABLE = {
  	"Alpha":"&#913;",
  	"Beta":"&#914",
  	"Gamma": "&#915;",
  	"alpha": "&#945;",
  	"beta":"&#946;",
  	"gamma": "&#947;"
  }
  function getid() {
    var id = CURR_ID;
    CURR_ID+=1;
    return id;
  }
}

start
  = equality
  /exp

p1binop "p1binop" 
  = OPAREN e:exp CPAREN {return {id:getid(),type:'op', op:'paren', exp:e}}
  / v:value {return v}

p2binop "p2binop" 
  = base:p1binop code:EXP exp:p2binop {return {id:getid(),type:'op', op:'exp', code:code, exp:exp, base:base}}
  / v:p1binop {return v}

p3binop "p3binop" 
  = v:p2binop code:MULT n:p3binop SEP*
  	{return {id:getid(),type:'op', op:"mult", code:code, left:v, right:n}}

  / code:DIV OCBRACE v:p2binop CCBRACE SEP* OCBRACE n:p3binop CCBRACE
  	{return {id:getid(),type:'op', op:"div", code:code, top:v, bottom:n}}

  / v:p2binop SEP* 
  	{return v}

p4binop "p4binop" //add, sub
  = v:p3binop code:PLUS n:p4binop 
  	{return {id:getid(),type:'op', op:'plus', code:code, left:v, right:n}}
  / v:p3binop code:MINUS n:p4binop 
  	{return {id:getid(),type:'op', op:'minus', code:code, left:v, right:n}}
  / v:p3binop SEP* {return v;}

binop "binop"
  = n:p4binop {return n;}

exp "exp"
  = t:binop { return t;}

equality "equality"
  = v:exp code:EQUALS n:exp {return {id:getid(),type:'op', op:'eq', code:code, left:v, right:n}}
  


number "number"
  = v:DECIMAL { 
   return { id:getid(), type:'number', value:v };
  }

variable "variable" 
  = v:LITERAL {return {id:getid(), type:"variable", code:v.sym, name:v.name}}

value "value"
  = n:number SEP* {return n;}
  / v:variable SEP* {return v;}


DECIMAL "DECIMAL"
  = mant:[0-9]+"."dec:[0-9]+ {
	  	var v= mant.join("")+"."+dec.join("");
	  	console.log(v);
	  	return parseFloat(v,10)
  	}
  / digits:[0-9]+ {return parseInt(digits.join(""),10)}

LITERAL "LITERAL"
  = l:[A-Za-z]+ 
	  {
	  	var name = l.join("");
	  	var sym = name;
	  	return {name:name, sym:sym}
	  }
  / "\\"l:[A-Za-z]+ 
	  {
	  	var name = l.join("");
	  	var sym = SYMBOL_TABLE[name];
	  	return {name:name, sym:sym}
	  }

SEP "SEP"
  = [ \t\r\n]

MULT "MULT"
= "\\cdot"SEP* {return "&#8727;"} 
/ "\\times"SEP* {return "x"}

DIV "DIV"
= "\\frac"SEP* {return ""}

PLUS "PLUS"
= "\\plus"SEP* {return "+"}
/ "+"SEP* {return "+"}

MINUS "MINUS"
= "-"SEP* {return "-"}

EXP "EXP"
= "^"SEP* {return ""}

EQUALS "EQUALS"
= "="SEP* {return "="}


OCBRACE "OCBRACE" 
	= "{"SEP*  {}

CCBRACE "CCBRACE" 
	= "}"SEP* {}

OPAREN "OPAREN" 
	= "("SEP* {}

CPAREN "CPAREN" 
	= ")"SEP* {}
