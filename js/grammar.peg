{
  var CURR_ID = 0;
  var SYMBOL_TABLE = {
    "Alpha":"913",
    "Beta":"914",
    "Gamma": "915",
    "alpha": "945",
    "beta":"946",
    "gamma": "947",
  };
  var FORMULA = new Formula();
  var cleanup = function(){

  }
  var append_op = function(p, e){
    e.set_parent(p.id,true);
    return p;
  }
  var create_op = function(e,m){
    var p = FORMULA.add(m);
    for(var i=0; i < e.length; i++){
      e[i].set_parent(p.id);
    }
    return p;
  }
  var create_term = function(dict,m){
    var node = FORMULA.add(m);
    for(var d in dict){
      node.set(d, dict[d]);
    }
    return node;
  }
}

start =
  e:exp
  {
    FORMULA.set_root(e.id);
    cleanup();
    return FORMULA;
  }


exp "exp" =
  t:PEDMASEQ { return t;}

P "P" =
  t:paren { return t;}
  / t:value { return t;}
  / t:variable { return t;}

PE "PE" = 
  t:expo {return t;}
  / t:P {return t;}

PED "PED" = 
  t:div {return t;}
  / t:PE {return t;}

PEDM "PEDM" = 
  t:mult {return t;}
  / t:PED {return t;}

PEDMA "PEDMA" = 
  t:plus {return t;}
  / t:PEDM {return t;}

PEDMAS "PEDMAS" = 
  t:sub {return t;}
  / t:PEDMA {return t;}

PEDMASEQ "PEDMASEQ" = 
  t:eq {return t;}
  / t:PEDMAS {return t;}

number "number" =
   v:DECIMAL { return create_term({code:(""+v), value:v}, "NUMBER"); }

variable "variable" =
   v:LITERAL { return create_term({code:(""+v.sym), name:v.name}, "VAR"); }

value "value" =
   n:number {return n;}
  / v:variable {return v;}

paren "paren" =
    OPAREN e:exp CPAREN
    { return create_op([e], "PAREN"); }

expo "expo" =
    e:P m:EXP p:expo { return append_op(p,e); }
    / e1:P m:EXP e2:P { return create_op([e1,e2], 'EXPO'); }


div "div" =
    e:PE m:DIV p:div { return append_op(p,e); }
    / e1:PE m:DIV e2:PE { return create_op([e1,e2], 'DIV'); }

mult "mult" =
    e:PED m:MULT p:mult { return append_op(p,e); }
    / e1:PED m:MULT e2:PED { return create_op([e1,e2], 'MULT'); }

plus "plus" =
    e:PEDM m:PLUS p:plus { return append_op(p,e); }
    / e1:PEDM m:PLUS e2:PEDM { return create_op([e1,e2], 'ADD'); }

sub "sub" =
    e:PEDMA m:MINUS p:sub { return append_op(p,e); }
    / e1:PEDMA m:MINUS e2:PEDMA { return create_op([e1,e2], 'SUB'); }

eq "eq" =
    e:PEDMAS m:EQUALS p:eq { return append_op(p,e); }
    / e1:PEDMAS m:EQUALS e2:PEDMAS { return create_op([e1,e2], 'EQ'); }
/*

Basic Symbols

*/

DECIMAL "DECIMAL" =
   mant:[0-9]+"."dec:[0-9]+ SEP* {
      var v= mant.join("")+"."+dec.join("");
      return parseFloat(v,10)
    }
  / digits:[0-9]+ SEP* {return parseInt(digits.join(""),10)}

LITERAL "LITERAL" =
   l:[A-Za-z]+ SEP*
    {
      var name = l.join("");
      var sym = name;
      return {name:name, sym:sym}
    }
  / "\\"l:[A-Za-z]+
    {
      var name = l.join("");
      var sym = "@"+SYMBOL_TABLE[name];
      return {name:name, sym:sym}
    }


SEP "SEP"
  = [ \t\r\n]

MULT "MULT"
= "\\cdot"SEP* {return "&#8727;"}
/ "\\times"SEP* {return "x"}
/ "*"SEP* {return "*"}

DIV "DIV"
= "\\frac"SEP* {return ""}
/ "/" {return ""}

PLUS "PLUS"
= "\\plus"SEP* {return "+"}
/ "+"SEP* {return "+"}

MINUS "MINUS"
= "-"SEP* {return "-"}

EXP "EXP"
= "^"SEP* {return ""}

EQUALS "EQUALS"
= "="SEP* {return "="}


OCBRACE "OCBRACE"
  = "{"SEP*  {}

CCBRACE "CCBRACE"
  = "}"SEP* {}

OPAREN "OPAREN"
  = "("SEP* {}

CPAREN "CPAREN"
  = ")"SEP* {}
